#!/usr/bin/env bash

################################################################################

### Set bash environment error management

set -eu

################################################################################

### Add padding to output

echo

################################################################################

### Determine script execution directory and install directory.

exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | ${exec_dir} |."
		echo
		echo "Exiting..."
		echo
        exit 1
	fi
fi

### Source local functions file.

. "$exec_dir_root/functions"

################################################################################

### Define formatting

synthia-define_formatting

################################################################################

### Check for root user runtime

synthia-check_root

################################################################################

### Source dna

synthia-source_dna

################################################################################

### Define variables

synthia-define_vars

################################################################################

### Read conf settings

dna-read_conf_settings

################################################################################

### Log script

dna-log_script

################################################################################

<<<<<<< HEAD
synthia_backup
=======
while getopts ":s" arguments; do
    case $arguments in
		s)	skip_install_complete_check="-s"
			;;
		\?)	dna-echo -e "Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
			dna-exit
			;;
	esac
done
OPTIND=1

################################################################################

### Check for lockfile to avoid multiple simultaneous backups

if [ -f "/tmp/${proj_name}-backup-running-lockfile" ]
then

    dna-echo -e "It appears a ${proj_name} backup is already running, perhaps an automated daily one, or perhaps the last one was interrupted."
    dna-echo -m "If this *is* an automated daily one, please check that you're not running a manual one or that the last run was interrupted."
    dna-echo -m "Running multiple simultaneous backups is absolutely not supported and will make both fail."

	if [ "${interactive}" = "y" ]
    then
        dna-ask_for_boolean -d "n" -q "If you're certain that another backup is NOT running, would you like to ignore the lockfile and continue?"
        if [ "${boolean_output}" = "y" ]
        then
            dna-echo -m "Ok, continuing anyway..."
            export lockfile_set="/tmp/${proj_name}-backup-running-lockfile"
        else
            dna-echo -m "Ok, aborting..."
            dna-exit
        fi

    else

        dna-echo -m "If you're certain that another backup is NOT running, run this script manually and select to ignore the lockfile and continue when prompted."
        dna-echo -m "Alternatively, you can also log into this machine and | ${o-}rm /tmp/${proj_name}-backup-running-lockfile${n-} |."
        dna-echo -e "Aborting backup for now."
        dna-exit

    fi

else

    ### Set lockfile.

    export lockfile_set="/tmp/${proj_name}-backup-running-lockfile"
    touch "${lockfile_set}"

fi

################################################################################

dna-br_purge_dirs

dna-br_create_dirs backup

if [ "${backup_locally_mode}" = "enabled" ]
then

	dna-br_purge_incomplete_archives

	dna-br_update_storage_info

	dna-br_purge_backups

fi

if [ "$backup_archival_location" = "s3" ]
then

	if [ "${backup_test_restore_mode}" = "enabled" ]
	then

	    dna-br_restore_from_S3 test

	fi

    dna-br_purge_dirs

    dna-br_create_dirs backup

fi

if [ "${backup_locally_mode}" = "enabled" ]
then

	dna-br_backup_locally "${skip_install_complete_check-}"

fi

################################################################################

if [ "${backup_archival_location}" = "s3" ]
then

    if [ "${s3_restore_test_failed-null}" = "y" ]
    then

        dna-echo -e "Skipping S3 backup because of a previous test restore failure."

        rm -r "${tmp_backup_dir}"

    else

		if [ "${backup_locally_mode}" = "enabled" ]
		then

	    	mv "${tmp_backup_dir}"/* "${backup_local_storage_path}/latest"

		fi

    	############################################################################

    	dna-br_backup_to_S3

    fi

else

	if [ "${backup_locally_mode}" = "disabled" ]
	then

		dna-echo -e "Local backups disabled and S3 backups not enabled. Not performing any backups."

	fi

	rm -r "$tmp_backup_dir"

fi

if [ -d "$backup_local_storage_path/temp" ]
then
	rm -r "${backup_local_storage_path:?}/temp"
fi

dna-br_purge_dirs

if [ -f "/tmp/${proj_name}-backup-running-lockfile" ]
then
    rm "/tmp/${proj_name}-backup-running-lockfile"
fi

if [ "${s3_restore_test_failed-null}" = "y" ]
then
    dna-exit
fi

dna-echo -s "Backup complete!"
>>>>>>> 0cd01892b4465fe697a2ee03fded57bdcf7e7cab
