#!/usr/bin/env bash

################################################################################

### initialize script with standard synthia bootstrapping block.

### ############################################################################

#### 1 | clear screen.

clear

#### 2 | locate execution environment and perform synthia-bound operations.

#### ###########################################################################

##### set bash environment error management.

set -eu

##### determine script execution directory and install directory.

if [ -L "${BASH_SOURCE}" ]
then

    ###### this file is being executed via a symlink.
    ###### therefore identify the parent directory of the target file.

    link_target="$(readlink ${BASH_SOURCE})"
    exec_dir="${link_target%/*}"

else

    ###### this file is being directly executed.
    ###### therefore identify our parent directory.

    exec_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

fi

exec_dir_trim_2="$( echo ${exec_dir} | cut -f 1,2,3 -d'/')"
exec_dir_trim_3="$( echo ${exec_dir} | cut -f 1,2,3,4 -d'/')"

if [ -f "${exec_dir_trim_2}/functions" ]
then
	exec_dir_root="${exec_dir_trim_2}"
else
	if [ -f "${exec_dir_trim_3}/functions" ]
	then
		exec_dir_root="${exec_dir_trim_3}"
	else
		echo "Functions file not found in any second or third level parent directory of: | ${exec_dir} |."
		echo
		echo "Exiting..."
		echo
        exit 1
	fi
fi

##### source local functions file.

. "$exec_dir_root/functions"

##### define formatting.

synthia-define_formatting

##### check for root user runtime.

synthia-check_root

#### ###########################################################################

#### 3 | head upgrade.

echo "${g-}${b-}Initiating upgrade...${x-}"
echo

### ############################################################################

### evaluate arguments.

### ############################################################################

while getopts ":b:d:p:o:" arguments
do
    case $arguments in
        b)  export custom_branch="${OPTARG}"
            ;;
        d)	export custom_dna_version="${OPTARG}"
	        ;;
		p)	export custom_project_version="${OPTARG}"
	        ;;
        o)	export custom_output="${OPTARG}"
        ;;
        \?)	echo "${r-}${b-}Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |.${x-}"
	        echo
			echo "${b-}Exiting...${x-}"
			echo
	        exit 1
	        ;;
    esac
done
OPTIND=1

if [[ "${custom_project_version-null}" == "l" ]]                                  ### Do NOT escape the string comparison
then
	echo
    dna-echo -e "You're running the installation via the upgrade script."
    dna-echo -m "Therefore the | ${r-}local${n-} | version of the ${proj_name} directory doesn't exist, as it's cloned automatically by the upgrade script itself."
    dna-echo -m "If you want to make customizations to the project before installing it, clone it yourself while in the root directory of the root user and then run:"
    dna-echo -m " | ${c-}bash ${proj_name}/setup -pl | "
    dna-exit
fi

if [ -n "${custom_branch}" ]
then
    export custom_project_version="b"
fi

### ############################################################################

### continue initializing script with standard synthia bootstrapping block.

### ############################################################################

#### 4 | download and source dna and perform dna-bound operations.

#### ###########################################################################

##### download dna

synthia-download_dna

##### source dna.

synthia-source_dna

##### define variables.

synthia-define_vars

#### ###########################################################################

### ############################################################################

### clone and upgrade

### ############################################################################

if [ -d "/root/${proj_name}/" ]
then
    rm -r "/root/${proj_name}/"
fi

echo

cd

if [ -z "${custom_branch}" ]
then
    git clone "${git_host}/${author_name}/${proj_name}"
else
    git clone "${git_host}/${author_name}/${proj_name}" -b "${custom_branch}"
fi

dna-run_install

### ############################################################################
